#solution: sort + compare
#time complexity: O(n), 88 ms, 68.30%
#space complexity: O(n), 17.8 MB, 7.14%
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        if not nums: return -1
        unique = sorted(list(set(nums)))
        nums = sorted(nums)
        for i in range(len(unique)):
            if nums[i]!= unique[i]: return nums[i]
        return nums[-1]

#solution: two pointers
#time complexity: O(n)
#space complexity: O(1)

class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow=0
        fast=0
        while(1):
            slow=nums[slow]
            fast=nums[nums[fast]]
            if(slow==fast):
                break
        find=0
        while(1):
            find=nums[find]
            slow=nums[slow]
            if(find==slow):
                return find

reference: https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-kuai-man-zhi-zhen-zhu-xing-jie-shi-pytho/

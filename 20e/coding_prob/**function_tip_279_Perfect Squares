# [279] Perfect Squares
#

# @lc code=start
# dp
# time complexity: O(n*sqrt(n))
# space complexity: O(n)
import math
class Solution:
    def numSquares(self, n: int) -> int:
        if int(math.sqrt(n))==math.sqrt(n):
            return 1
        dp = list(range(0,n+1))
        for i in range(1,n+1):
            if int(math.sqrt(i))==math.sqrt(i):
                dp[i] = 1
            else:
                dp[i] = min(dp[i-(j**2)] for j in range(1,int(math.sqrt(i))+1)) + 1
        return dp[n]
        
# @lc code=end
# 2752
# 2820
# # dp
# # time complexity: O(nlogn)
# # space complexity: O(n)
# class Solution:
#     def numSquares(self, n: int) -> int:
#         if n**0.5%1==0:
#             return 1
#         if n>1:
#             if (n-1)**0.5%1==0:
#                 return 2
#         dp = list(range(0,n+1))
#         for i in range(1,n+1):
#             if i**0.5%1==0:
#                 dp[i] = 1
#             else:
#                 for j in range(2, i//2 + 1):
#                     dp[i] = min(dp[i], dp[j] + dp[i-j])
#         return dp[n]

# [1004] Max Consecutive Ones III
#
# slide window
# the longest window would be kept since:
# when k < 0, i and j are moving in the same speed 
# when k >= 0, j is moving forward so that the window can be expanded
# time complexity: O(n)
# space complexity: O(1)
# @lc code=start
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        i = 0
        for j in range(len(nums)):
            k = k - (1 - nums[j])
            if k < 0:
                k = k + (1 - nums[i])
                i = i + 1
        return j - i + 1


                

# @lc code=end
# [1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,0]\n 1
# [1,1,0,0,1,1,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,1,1,1,1,1,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,1,1,1,1,0,1]\n 3
# [1,1,1,1,1,1,0,0,0,1,1,1,1,0] \n 2

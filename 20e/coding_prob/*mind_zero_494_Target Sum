# [494] Target Sum
#

# @lc code=start
# time complexity: O(2^n)
# space complexity: O(n)

class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        l = len(nums)
        dp = []
        for i in range(l+1):
            if i == 0:
                dp.append({0:1})
            else:
                dp.append({})

        for i in range(1,l+1):
            prev = dp[i-1]
            for j in prev:
                if nums[i-1] == 0:
                    dp[i][j] = dp[i-1][j]*2
                    continue
                if j+nums[i-1] in dp[i]:
                    cur1 = dp[i][j+nums[i-1]]
                else:
                    cur1 = 0
                if j-nums[i-1] in dp[i]:
                    cur2 = dp[i][j-nums[i-1]]
                else:
                    cur2 = 0
                dp[i][j+nums[i-1]] = dp[i-1][j] + cur1
                dp[i][j-nums[i-1]] = dp[i-1][j] + cur2
        if target not in dp[l]:
            return 0
        return dp[l][target]


# @lc code=end

#[1]\n 1
#[1,1,1,1,1]\n 4
#[3,1,1,6,1,10,1,0,2,5,3,7,0,1,4]\n -11
#[1,0]\n 1
#[1,0,1,0] \n 2
#[1,0,1,0] \n 0

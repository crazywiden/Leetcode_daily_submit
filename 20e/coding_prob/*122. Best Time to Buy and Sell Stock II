# simple go through
# time complexity: O(n)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        l = len(prices)
        res = 0
        for i in range(l-1):
            if prices[i+1]>prices[i]:
                res = res + prices[i+1] - prices[i]
        return res
        
# brutal force
# time complexity: O(n^n)
# space complexity: O(n)
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         l = len(prices)
#         if l < 2: 
#             return 0
#         profit = 0
#         for i in range(l-1):
#             buy = prices[i]
#             for j in range(i+1,l):
#                 if prices[j] > buy:
#                     tmp = prices[j] - buy + self.maxProfit(prices[j+1:])
#                     if tmp > profit:
#                         profit = tmp
#         return profit

# dp
# time complexity: O(n^2)
# space complexity: O(n)
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         l = len(prices)
#         dp = [0]*l
#         for i in range(1, l):
#             tmp = []
#             for j in range(i):
#                 if prices[i]>prices[j]:
#                     tmp.append(dp[j] + prices[i] - prices[j])
#                 else: tmp.append(dp[j])
#             dp[i] = max(tmp)
#         return dp[l-1]

# vally & peak
# time complexity: O(n)
# class Solution:
#     def maxProfit(self, prices: List[int]) -> int:
#         l = len(prices)
#         valley = prices[0]
#         peak = prices[0]
#         res = 0
#         i = 0
#         while i < l-1:
#             while i< l-1 and prices[i] >= prices[i+1]:
#                 i = i+1
#             valley = prices[i]
#             while i < l-1 and prices[i] <= prices[i+1]:
#                 i = i+1
#             peak = prices[i]
#             res = res + max([peak - valley,0])
#         return res
   

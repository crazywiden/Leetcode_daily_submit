
# # dp
# # time complexity: O(n*n*m)
# # space complexity: O(m*n)
# class Solution:
#     def maxPoints(self, points: List[List[int]]) -> int:
        # m = len(points)
        # n = len(points[0])
        # dp = [points[0]]+[[0]*n for i in range(m-1)]
        # res = max(points[0])
        # for i in range(1,m):
        #     for j in range(n):
        #         dp[i][j] = max([dp[i-1][k]-abs(j-k) for k in range(n)]) + points[i][j]
        #         if res < dp[i][j]:
        #             res = dp[i][j]
        # return max(dp[-1])

# [17] Letter Combinations of a Phone Number
#

# @lc code=start
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        l_map = {
            "2":["a", "b", "c"],
            "3":["d", "e", "f"],
            "4":["g", "h", "i"],
            "5":["j", "k", "l"],
            "6":["m", "n", "o"],
            "7":["p", "q", "r", "s"],
            "8":["t", "u", "v"],
            "9":["w", "x", "y", "z"]
        }

        l_d = len(digits)
        if l_d == 0:
            return ""
        if l_d == 1:
            return l_map[digits]

        m = (l_d + 1) // 2
        right = self.letterCombinations(digits[:m])
        left = self.letterCombinations(digits[m:])
        res = []

        for r in right:
            for l in left:
                res.append(r+l)
        
        return res

# @lc code=end
# ""2""
# ""8345""

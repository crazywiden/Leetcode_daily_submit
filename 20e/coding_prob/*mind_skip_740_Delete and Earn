# [740] Delete and Earn
#

# dp
# time complexity: O(n)
# space complexity: O(n)
# @lc code=start
from collections import Counter
class Solution:
    def deleteAndEarn(self, nums: List[int]) -> int:
        n_nums = sorted(set(nums))
        n = len(n_nums)
        d_nums = Counter(nums)
        dp = [0]*n
        dp[0] = n_nums[0]*d_nums[n_nums[0]]

        for i in range(1,n):
            if n_nums[i] != n_nums[i-1]+1:
                dp[i] = dp[i-1] + n_nums[i]*d_nums[n_nums[i]]
            else:
                if i-2 >= 0:
                    dp[i] = max(dp[i-2] + n_nums[i]*d_nums[n_nums[i]], dp[i-1])
                else:
                    dp[i] = max(n_nums[i]*d_nums[n_nums[i]], dp[i-1])
        return max(dp)
        
# @lc code=end

# [2,2,3,3,1,3,5,4,10]
# [2,12,13,1,3,5,4,10,1,10,11,11,14,2,3,3]
# [1,1,1,2,4,5,5,5,6]
# [1,1,1,2,4,5,5,5,6,8,8,8]

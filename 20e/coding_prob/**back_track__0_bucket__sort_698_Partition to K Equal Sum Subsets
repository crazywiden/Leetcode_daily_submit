# [698] Partition to K Equal Sum Subsets
#

# time complexity: O(n^k)
# when look at each element, will try at most k paths
# (only k because when one success found then stop)
# for each path n-i steps would need to be ran.
# @lc code=start
class Solution:
    def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
        l = len(nums)
        t = sum(nums)
        # this improved the efficiency, increase the chance to skip early on line 25
        nums.sort(reverse = True) 
        s = t/k
        if l < k or s != int(sum(nums)/k) or max(nums) > s:
            return False
        sums = [0]*k
        def helper(i):
            if i == l:
                if len(set(sums)) == 1:
                    return True
            for j in range(k):
                sums[j] = sums[j]+nums[i]
                if sums[j] <= s and helper(i+1):
                    return True
                sums[j] = sums[j]-nums[i]
                # the destined path should always adding stuff to bucket
                # never back
                if sums[j] == 0: 
                    break
            return False
        return helper(0)


# @lc code=end

# [1,2,3,4]\n 3
# [6,19,2,13,4,11,3,20,49, 3,12,2,14]\n 3
# [4,3,2,3,5,2,1,4,3,2,3,5,2,1]\n 5
# [2,2,2,2,3,4,5]\n 4

# need bit-mask
# not working for [2,2,2,2,3,4,5]\n 4
# class Solution:
#     def canPartitionKSubsets(self, nums: List[int], k: int) -> bool:
#         if sum(nums)/k != int(sum(nums)/k):
#             return False
#         if max(nums) > sum(nums)/k:
#             return False
#         n = sum(nums)
#         s = int(sum(nums)/k)
#         dp = [0]*(n+1)
#         l = len(nums)
#         seen = set()

#         for i in range(l):
#             tmp_seen = set()
#             dp[nums[i]] = 1
#             tmp_seen.add(nums[i])
#             for j in seen:
#                 if dp[j]==1 and j+nums[i] <= n:
#                     dp[j+nums[i]] = 1
#                     tmp_seen.add(j+nums[i])
#             seen = seen | tmp_seen

#         for i in range(1,k+1):
#             if dp[s*k] == 0:
#                 return False
#         return True

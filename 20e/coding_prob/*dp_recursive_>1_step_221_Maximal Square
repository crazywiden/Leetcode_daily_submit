# [221] Maximal Square
#

# @lc code=start
# time complexity: O(nm)
# space complexity: O(nm)
class Solution:
    def maximalSquare(self, matrix: List[List[str]]) -> int:
        m = len(matrix)
        n = len(matrix[0])
        res = 0
        if m == 1:
            return max(matrix[0])
        if n == 1:
            for i in range(m):
                res = max(res, int(matrix[i][0]))
            return res
        
        dp = [[0]*n for i in range(m)]
        for i in range(m):
            dp[i][0] = int(matrix[i][0])
            res = max(res, dp[i][0])
        for j in range(n):
            dp[0][j] = int(matrix[0][j])
            res = max(res, dp[0][j])

        for i in range(1,m):
            for j in range(1,n):
                if matrix[i][js] == "1":
                    dp[i][j] = min([dp[i-1][j], dp[i][j-1], dp[i-1][j-1]])+1
                    res = max(res, dp[i][j])

        return res*res

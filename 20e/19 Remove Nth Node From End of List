#solution:
#time complexity:O(n), 40 ms, 75.09%
#space complexity:O(n), 13.6 MB, 5.41%
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:

        if n == 0: return head
        if not head: return None

        node = head
        lst = list()

        while node:
            lst.append(node)
            node = node.next
        l = len(lst)
        if n == 1 and l>1: lst[l-n-1].next = None
        elif n == l: return head.next
        else: lst[l-n-1].next = lst[l-n+1]

        return head

# can add a dummy node before head, to aviod some corner cases
# can also use two pointer(A,B) and A-B = n, when A hit the end, B is at the Nth Node from the end
#solution:dfs
#time complexity:O(amount), 2100 ms, 25.12%
#space complexity: O(amount), 44.3 MB, 6.45%
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        memo={0:0}
        def helper(n):   
            if(n in memo):
                return memo[n]
            res=float("inf")
            for coin in coins:
                if(n>=coin):
                    res=min(res,helper(n-coin)+1)
            memo[n]=res
            return res
        return helper(amount) if(helper(amount)!=float("inf")) else -1

#solution:dp
#time complexity:O(amount), 1724 ms, 50.09%
#space complexity: O(amount), 13.7 MB, 6.45%
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        
        dp=[float("inf")]*(amount+1)
        dp[0]=0
        for i in range(1,amount+1):
            for coin in coins:
                if(i>=coin):
                    dp[i]=min(dp[i],dp[i-coin]+1)
        return dp[-1] if(dp[-1]!=float("inf")) else -1

#reference: https://leetcode-cn.com/problems/coin-change/solution/ji-yi-hua-hui-su-dong-tai-gui-hua-zhu-xing-jie-shi/
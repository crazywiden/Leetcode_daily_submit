# heap
# time complexity: O(nlogK), 728 ms, 72.64%
# space complexity: O(n), 19.5 MB, 28.39%
class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        dist_dict = {}
        l = len(points)
        for p in range(l):
            dist_dict[p] = points[p][0]**2 + points[p][1]**2
        heap = [(dist, points[p]) for p, dist in dist_dict.items()]
        heapq.heapify(heap)
        return [heapq.heappop(heap)[1] for _ in range(K)]

# divide and conquer
# time complexity: O(n^2), but average O(n), 1256 ms, 7.42%
# space complexity: O(n), 18.9 MB, 92.09%
class Solution(object):
    def kClosest(self, points, K):
        dist = lambda i: points[i][0]**2 + points[i][1]**2

        def sort(i, j, K):
            # Partially sorts A[i:j+1] so the first K elements are
            # the smallest K elements.
            if i >= j: return

            # Put random element as A[i] - this is the pivot
            k = random.randint(i, j)
            points[i], points[k] = points[k], points[i]

            mid = partition(i, j)
            if K < mid - i + 1:
                sort(i, mid - 1, K)
            elif K > mid - i + 1:
                sort(mid + 1, j, K - (mid - i + 1))

        def partition(i, j):
            # Partition by pivot A[i], returning an index mid
            # such that A[i] <= A[mid] <= A[j] for i < mid < j.
            oi = i
            pivot = dist(i)
            i += 1

            while True:
                while i < j and dist(i) < pivot:
                    i += 1
                while i <= j and dist(j) >= pivot:
                    j -= 1
                if i >= j: break
                points[i], points[j] = points[j], points[i]

            points[oi], points[j] = points[j], points[oi]
            return j

        sort(0, len(points) - 1, K)
        return points[:K]

#reference: https://leetcode.com/problems/k-closest-points-to-origin/solution/


#brute force
#time complexity: O(2^n)
#space complexity: O(2^n)

class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        if sum(nums) < abs(S): return 0

        z = 0
        for k in nums:
            if k == 0: 
                z = z + 1
                nums.remove(k)
        
        if sum(nums) == abs(S): return 2**z

        queue = [0]

        for i in range(len(nums)):
            l = len(queue)
            for j in range(l):
                n = queue.pop(0)
                queue = queue + [n+nums[i],n-nums[i]]

        l = len(queue)
        res = 0
        for j in range(l):
            if queue[j] == S: res = res + 1

        return res*(2**z)

#dfs
#time complexity: O(2^n), 516 ms, 42.76%
#space complexity: O(2^n), 14.6 MB, 33.33%

class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        d = {}
        def dfs(cur, i, d):
            if i < len(nums) and (cur, i) not in d: # 搜索周围节点
                d[(cur, i)] = dfs(cur + nums[i], i + 1, d) + dfs(cur - nums[i],i + 1, d)
            return d.get((cur, i), int(cur == S))   
        return dfs(0, 0, d)

#ZeroOnePack
#time complexity: O(n*sum), 80 ms, 95.62% 
#space complexity: O(n*sum), 13.7 MB, 33.33%

class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        if sum(nums) < S or (sum(nums) + S) % 2 == 1: return 0
        P = (sum(nums) + S) // 2
        dp = [1] + [0 for _ in range(P)]
        for num in nums:
            for j in range(P,num-1,-1):dp[j] += dp[j - num]
        return dp[P]

#reference: https://leetcode-cn.com/problems/target-sum/solution/python-dfs-xiang-jie-by-jimmy00745/


#dp
#time complexity: O(n*sum), 1548 ms, 7.52%
#space complexity: O(n*sum), 13.7 MB, 33.33%

class Solution:
    def findTargetSumWays(self, nums: List[int], S: int) -> int:
        length, dp = len(nums), {(0,0): 1}
        for i in range(1, length+1):
            for j in range(-sum(nums), sum(nums) + 1):
                dp[(i,j)] = dp.get((i - 1, j - nums[i-1]), 0) + dp.get((i - 1, j + nums[i-1]), 0)             
        return dp.get((length, S), 0)

#reference: https://leetcode-cn.com/problems/target-sum/solution/python-dfs-xiang-jie-by-jimmy00745/



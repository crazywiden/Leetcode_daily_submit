#solution1: recursive
#time complexity: O(2^n), 40 ms, 57.13%
#space complexity: O(2^n), 13.7 MB, 5.41%

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:

        d = {"2":["a","b","c"],
        "3":["d","e","f"],
        "4":["g","h","i"],
        "5":["j","k","l"],
        "6":["m","n","o"],
        "7":["p","q","r","s"],
        "8":["t","u","v"],
        "9":["w","x","y","z"],
        }

        l = len(digits)
        if l < 1: 
            return []
        if l == 1: 
            return d[digits]

        res = []
        string = self.letterCombinations(digits[0:l-1])

        for add in d[digits[l-1]]:
            for s in string:
                res.append(s+add)

        return res
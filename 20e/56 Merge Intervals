#solution: find-union
#time complexity: O(n), 44 ms, 93.20% 
#space complexity: O(n), 15.5 MB, 6.25%

class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        s_int = sorted(intervals)
        l_int = len(intervals)
        ht_dict = {}
        th_dict = {}
        res = []

        for i in range(l_int):
            ht_dict[i] = i
            th_dict[i] = i

        for i in range(l_int-1):
                if s_int[ht_dict[th_dict[i]]][1] >= s_int[i+1][0]:
                    th_dict[i+1] = th_dict[i]
                    if s_int[i+1][1] > s_int[ht_dict[th_dict[i]]][1]:
                        ht_dict[th_dict[i]] = i+1
                    del ht_dict[i+1]    

        for h in list(ht_dict.keys()):
            res.append([s_int[h][0],s_int[ht_dict[h]][1]])

        return res

#time complexity: O(nlogn)
#space complexity: O(nlogn)
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
        intervals.sort(key=lambda x: x[0])

        merged = []
        for interval in intervals:
            # 如果列表为空，或者当前区间与上一区间不重合，直接添加
            if not merged or merged[-1][1] < interval[0]:
                merged.append(interval)
            else:
                # 否则的话，我们就可以与上一区间进行合并
                merged[-1][1] = max(merged[-1][1], interval[1])

        return merged

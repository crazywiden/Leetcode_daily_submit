#solution1: Enumeration method
#time complexity: O(n^2)
#space complecity: O(n)
class Solution:
    def maxArea(self, height: List[int]) -> int:
        m = len(height)
        area = []
        for i in range(m):
            for j in range(m):
                area.append(abs(i-j)*min(height[i],height[j]))
        return max(area)


#solution2: two pointers
#time complexity: O(n), 120 ms, 27.85%
#space complexity: O(1), 14.9 MB, 10.34%

class Solution:
    def maxArea(self, height: List[int]) -> int:
        left = 0
        right = len(height)-1
        max_area = 0
        while left <= right:
            print((left,right))
            area = (right - left) * min(height[left],height[right])
            max_area = max(area,max_area)
            if height[left] <= height[right]:
                left = left + 1
            else:
                right = right - 1
        return max_area



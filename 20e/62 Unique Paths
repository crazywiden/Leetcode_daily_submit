#math
#time complexity: O(m+n), 40 ms, 74.19%
#space complexity: O(1), 13.7 MB, 6.25%
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        if min(m,n)==0: return 0
        if min(m,n)==1: return 1
        s = m-1 + n-1
        pro = 1
        print(s)
        for i in range(1,s+1):
            pro = pro*i
            if i == m-1:
                d1 = pro
            if i == n-1:
                d2 = pro
        return int(pro/(d1*d2))

#dp
#time complexity: O(m*n), 44 ms, 50.77%
#space complexity: O(m*n), 13.6 MB, 6.25%
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0]*(m+1)]+[[0]+[1]*(m)]*(n)
        for i in range(2,n+1):
            for j in range(2,m+1):
                dp[i][j] = dp[i-1][j] + dp[i][j-1]

        return dp[n][m]
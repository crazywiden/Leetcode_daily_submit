#solution:queue
#time complexity: O(n), 88 ms, 15.75%, n = # of digits
#space complexity:O(n), 13.8 MB, 5.26%

class Solution:
    def intToRoman(self, num: int) -> str:

        dic = {
            1:"I",
            5:"V",
            10:"X",
            50:"L",
            100:"C",
            500:"D",
            1000:"M"
        }

        lst = [1,5,10,50,100,500,1000]

        length = len(str(num))
        queue = []
        res = ""
        for l in range(length):
            queue.append(num//(10**(length-l-1))*10**(length-l-1))
            num = num%(10**(length-l-1))
        
        for n in queue:
            if n in lst:
                res = res + dic[n]
            elif n > 1000: 
                for i in range(n//1000):
                    res = res + dic[1000]
            else:
                gt = [x for x,y in enumerate(lst) if y > n][0]
                print(gt)
                if gt in [2,4,6]:
                    if n == lst[gt]*0.9:
                        res = res + dic[lst[gt-2]] + dic[lst[gt]]
                    else:
                        res = res + dic[lst[gt-1]]
                        n = n - lst[gt-1]
                        while n>0:
                            res = res + dic[lst[gt-2]]
                            n = n - lst[gt-2]
                if gt in [1,3,5]:
                    if n == lst[gt]*0.8:
                        res = res + dic[lst[gt-1]] + dic[lst[gt]]
                    else:
                        while n>0:
                            res = res + dic[lst[gt-1]]
                            n = n - lst[gt-1]                

        return res

#solution2: greedy
#time complexity: O(n), 96 ms, 9.45%
#space complexity:O(n), 13.8 MB, 5.26%

class Solution:
    def intToRoman(self, num: int) -> str:

        dic = {
            1:"I",
            4:"IV",
            5:"V",
            9:"IX",
            10:"X",
            40:"XL",
            50:"L",
            90:"XC",
            100:"C",
            400:"CD",
            500:"D",
            900:"CM",
            1000:"M"
        }

        lst = [1000,900,500,400,100,90,50,40,10,9,5,4,1]
        res = ""
        
        while num:
            gt = [x for x,y in enumerate(lst) if y<=num][0]
            res = res + dic[lst[gt]]
            num = num - lst[gt]

        return res

digits = [(1000, "M"), (900, "CM"), (500, "D"), (400, "CD"), (100, "C"), (90, "XC"), 
          (50, "L"), (40, "XL"), (10, "X"), (9, "IX"), (5, "V"), (4, "IV"), (1, "I")]

def intToRoman(self, num: int) -> str:
    roman_digits = []
    # Loop through each symbol.
    for value, symbol in digits:
        # We don't want to continue looping if we're done.
        if num == 0: break
        count, num = divmod(num, value)
        # Append "count" copies of "symbol" to roman_digits.
        roman_digits.append(symbol * count)
    return "".join(roman_digits)

referenc: https://leetcode-cn.com/problems/integer-to-roman/solution/zheng-shu-zhuan-luo-ma-shu-zi-by-leetcode/
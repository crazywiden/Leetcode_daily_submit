#DP
#Problem: exceed time restriction(Passed 207/210)
#Cause: No need to track all path, only need the maximum & simplify the status
#Learned: Succeded in identifying the transition between status
#time complexity: O(n), 44 ms, 96.77% 
#space complexity: O(n), 14.2 MB, 9.09%
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        
        n = len(prices)
        f0, f1, f2 = -prices[0], 0, 0
        # f0: 手上持有股票的最大收益
        # f1: 手上不持有股票，并且处于冷冻期中的累计最大收益
        # f2: 手上不持有股票，并且不在冷冻期中的累计最大收益

        for i in range(1, n):
            newf0 = max(f0, f2 - prices[i])
            newf1 = f0 + prices[i]
            newf2 = max(f1, f2)
            f0, f1, f2 = newf0, newf1, newf2
        
        return max(f1, f2)


#reference:https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/solution/zui-jia-mai-mai-gu-piao-shi-ji-han-leng-dong-qi-4/
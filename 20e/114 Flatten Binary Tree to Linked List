
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

#solution1: recursive
#time complexity: O(n), 48 ms, 42.37%
#space complexity: O(h), 13.8 MB, 8.33%
#question1: how to calculate space complexity?
class Solution:
    def flatcell(self, cell: TreeNode) -> TreeNode:
        if not cell: return []
        if cell.left and cell.right:
            end = self.flatcell(cell.left)
            end.right = cell.right
            cell.right = cell.left
            cell.left = None
            return self.flatcell(end.right)
        if cell.left:
            cell.right = cell.left
            cell.left = None
            return self.flatcell(cell.right)
        if cell.right:
            return self.flatcell(cell.right)
        return cell
    def flatten(self, root: TreeNode) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        print(self.flatcell(root))

#solutions 2: stack

#solution 3:
#question : what is self.pre?
class Solution(object):
	def flatten(self, root):
		self.pre = None
		def dfs(root):
			if not root:
				return None
			# 右节点-左节点-根节点 这种顺序正好跟前序遍历相反
			# 用pre节点作为媒介，将遍历到的节点前后串联起来
			dfs(root.right)
			dfs(root.left)
			root.left = None
			root.right = self.pre
			self.pre = root
		dfs(root)

reference: https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/solution/dong-hua-yan-shi-si-chong-jie-fa-114-er-cha-shu-zh/

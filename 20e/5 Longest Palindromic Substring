# solution1: spread from the center
# time complexity: O(n^2), 1028 ms, 77.02%
# space complexity: O(1), 13.4 MB, 9.26%
class Solution:
    def spread(self, s, left, right) -> str:
        while left>=0 and right<len(s) and s[left] == s[right]:
            left = left - 1
            right = right + 1
        return s[left+1:right]

    def longestPalindrome(self, s: str) -> str:
        if not s: return ""
        l = len(s)
        res = s[0]

        for i in range(l):
            odd = self.spread(s,i,i)
            even = self.spread(s,i,i+1)
            res = max(odd,even,res,key = len)
        
        return res


# solution2: dp
# time complexity: O(n^2), 4356 ms, 36.75%
# space complexity: O(1), 22.3 MB, 5.55%
class Solution:

    def longestPalindrome(self, s: str) -> str:     
        length = len(s)
        if length<2: return s

        dp = [[False for _ in range(length)] for _ in range(length)]
        start = 0
        max_len = 1

        for j in range(1,length):
            for i in range(0,j):
                dp[i][j] = (s[i]==s[j] and (dp[i+1][j-1] or j-i<3))

                if dp[i][j]:
                    cur_len = j - i + 1
                    if cur_len > max_len:
                        max_len = cur_len
                        start = i

        return s[start:start+max_len]

reference:https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/
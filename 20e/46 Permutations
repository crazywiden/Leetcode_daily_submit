#solution: recursion
#time complexity: O(n^2), 52 ms, 20.55%
#space complexity: O(n^2), 13.5 MB, 5.41%
class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        if len(nums) == 1 or len(nums)==0: return [nums]
        item = nums[0]
        items = self.permute(nums[1:])
        length = len(items[0])
        res = []
        for i in items:
            if length > 1:
                for j in range(length+1):
                        new_item = i[:j] + [item] + i[j:]
                        res.append(new_item)

            else: 
                res.append([item]+i)
                res.append(i+[item])
        return res
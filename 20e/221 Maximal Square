#DFS
#time complexity: O(mnr), 220 ms, 10.90% 
#space complexity: O(1), 14.3 MB, 14.29%
class Solution:
    def checkMatrix(self, matrix, start_i, start_j, r) -> bool:
        # print(start_i, start_j, r)
        r = int(r)
        if r == 1 :return True
        for i in range(start_i,start_i+r):
            for j in range(start_j,start_j+r):
                # print(i,j,start_i, start_j, r)
                if matrix[i][j] == "0": 
                    return False
        return True

    def maximalSquare(self, matrix: List[List[str]]) -> int:
        if not matrix: return 0

        start = matrix[0][0]
        area = 0

        m = len(matrix)
        n = len(matrix[0])

        for i in range(m):
            for j in range(n):
                r = area**0.5
                if max(m-i, n-j, r) == r: 
                    print(i,j,r)
                    return int(area)
                if matrix[i][j]=="1":
                    if min(m,n) == 1: return 1
                    start = matrix[i][j]
                    if area == 0: area = 1
                    r = area**0.5
                    while r<min(m-i,n-j):
                        r = r + 1
                        if self.checkMatrix(matrix, i, j, r):
                            area = r**2
                        else: break
        return int(area)
#["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]
                        


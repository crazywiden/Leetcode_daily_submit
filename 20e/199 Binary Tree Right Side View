# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None


#solution 1: stack and going through all nodes,dfs
#time complexity: O(n), 48 ms, 25.59% 
#space complexity: O(logn) ~ O(n), 13.7 MB, 9.09%
class Solution:
    def rightSideView(self, root: TreeNode) -> List[int]:
        dic = {}
        max_depth = -1
        stack = [(root,0)]

        while stack:
            (node,depth) = stack.pop()
            if node:
                max_depth = max(depth,max_depth)
                dic.setdefault(depth, node.val)
                stack.append((node.left, depth + 1))
                stack.append((node.right, depth + 1))
        
        res = []
        for i in range(max_depth+1):
            res.append(dic[i])

        return res

#solution 2:BFS
from collections import deque

class Solution(object):
    def rightSideView(self, root):
        rightmost_value_at_depth = dict() # depth -> node.val
        max_depth = -1

        queue = deque([(root, 0)])
        while queue:
            node, depth = queue.popleft()

            if node is not None:
                # maintain knowledge of the number of levels in the tree.
                max_depth = max(max_depth, depth)

                # overwrite rightmost value at current depth. the correct value
                # will never be overwritten, as it is always visited last.
                rightmost_value_at_depth[depth] = node.val

                queue.append((node.left, depth+1))
                queue.append((node.right, depth+1))

        return [rightmost_value_at_depth[depth] for depth in range(max_depth+1)]

reference: https://leetcode-cn.com/problems/binary-tree-right-side-view/solution/er-cha-shu-de-you-shi-tu-by-leetcode/
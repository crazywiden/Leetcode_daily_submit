#solutionn: dfs + memory
#time complexity: O(n^3), exceeding range
#space complexity: O(n^3)
class Solution:
    def partition(self, s: str) -> List[List[str]]:
        memo = defaultdict(list)

        def dfs(s):
            l = len(s)
            if l == 1: return [[s]]
            res = []
            for i in range(1,l+1):
                tmp = s[0:i]
                if tmp == tmp[::-1]:
                    if i == l: res.append([tmp])
                    else:
                        if s[i:] not in memo:
                            memo[s[i:]] = dfs(s[i:])
                        rest = memo[s[i:]]
                        for r in rest:
                            res.append([tmp]+r)
            return res
        
        return dfs(s)

#solution: backtracking
#time complexity: O(n^2), 88 ms, 24.77%
#space complexity: O(n^2), 13.5 MB, 97.08%

class Solution:
    def partition(self, s: str) -> List[List[str]]:
        n = len(s)
        ans = []
        def helper(tmp,j):
            if j == n :
                ans.append(tmp)
            for i in range(j,n):
                if s[j:i+1] != s[j:i+1][::-1]:
                    continue
                helper(tmp+[s[j:i+1]],i+1)
        helper([],0)
        return ans

"""
test case:
"aabbbbbbaaaannnndhsgfkjhhh"
"""


#solution: dfs + dp + backtracking
#time complexity: O(n^2), 48 ms, 95.82%
#space complexity: O(n^2), 14 MB, 6.08%
"""
lesson 131:
1. use dp to save the pointer of elements needed
2. use backtracking to add new part after the current list, pass the list
backtrack model:
def helper(tmp,j):
            if j == n :# end condition
                ans.append(tmp) #save the result
            for i in range(j,n): # the range for next step
                if s[j:i+1] != s[j:i+1][::-1]:
                    continue
                helper(tmp+[s[j:i+1]],i+1) # recursion to deal with the next part

reference: https://leetcode-cn.com/problems/palindrome-partitioning/solution/hui-su-fa-tao-mo-ban-by-jkkk1996/
"""


class Solution:
    def partition(self, s: str) -> List[List[str]]:
        n = len(s)
        dp = [[False] * n for _ in range(n)]

        #dp[i][j]: recording if s[j:i+1] is palindrome
        for i in range(n):
            for j in range(i + 1):
                # s[j:i+1] = s[j] + s[j+1:i] + s[i] => spreading from the mid
                if (s[i] == s[j]) and (i - j <= 2 or dp[j + 1][i - 1]):
                    dp[j][i] = True
        res = []

        def helper(i, tmp):
            if i == n:
                res.append(tmp)
            for j in range(i, n):
                if dp[i][j]:
                    helper(j + 1, tmp + [s[i: j + 1]])

        helper(0, [])
        return res
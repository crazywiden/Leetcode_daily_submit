#solution: sliding window
#time complexity: O(nm), n = len(s), m = len(dic), after modification, m can be removed
#space complexity: O(m)

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        l = len(s)
        if l == 0: return 0
        tmp = {}
        max_len = 1
        for i in range(l):
            if s[i] in tmp:
                tmp_len = len(tmp)
                if tmp_len > max_len: max_len = tmp_len
                keys = list(tmp.keys())
                for j in keys:
                    if tmp[j] < tmp[s[i]]: del tmp[j]
            tmp[s[i]]=i
        if len(tmp) > max_len: max_len = len(tmp)
        return max_len

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # 如果字符串s为空，返回0
        if not s:return 0
        # 保存窗口内字符串
        lookup = list()
        n = len(s)
        # 最大子串长度
        max_len = 0
        # 当前窗口长度
        cur_len = 0
        # 遍历字符串s
        for i in range(n):
            val = s[i]
            # 如果该值不在窗口中
            if not val in lookup:
                # 添加到窗口内
                lookup.append(val)
                # 当前长度+1
                cur_len+=1
            # 如果该值在窗口中已存在
            else:
                # 获取其在窗口中的位置
                index = lookup.index(val)
                # 移除该位置及之前的字符，相当于上图中的图3到图4
                lookup = lookup[index+1:]
                lookup.append(val)
                # 当前长度更新为窗口长度
                cur_len = len(lookup)
            # 如果当前长度大于最大长度，更新最大长度值
            if cur_len > max_len:max_len = cur_len
        # 返回最大子串长度
        return max_len

reference: https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-dong-chuang-kou-tu-wen-jiang-jie-by-superychen/